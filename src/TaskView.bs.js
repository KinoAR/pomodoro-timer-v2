// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Utils$ReactHooksTemplate = require("./Utils.bs.js");
var TaskRow$ReactHooksTemplate = require("./TaskRow.bs.js");

function addElementToList(list, element) {
  var arr = $$Array.of_list(list);
  arr.push(element);
  return $$Array.to_list(arr);
}

function TaskView(Props) {
  Props.updateTask;
  var match = React.useReducer((function (state, action) {
          switch (action.tag | 0) {
            case 0 : 
                var value = action[1];
                switch (action[0]) {
                  case "taskDescription" : 
                      return /* record */[
                              /* title */state[/* title */0],
                              /* tasks */state[/* tasks */1],
                              /* currentTaskName */state[/* currentTaskName */2],
                              /* currentTaskDescription */value,
                              /* currentTask */state[/* currentTask */4]
                            ];
                  case "taskName" : 
                      return /* record */[
                              /* title */state[/* title */0],
                              /* tasks */state[/* tasks */1],
                              /* currentTaskName */value,
                              /* currentTaskDescription */state[/* currentTaskDescription */3],
                              /* currentTask */state[/* currentTask */4]
                            ];
                  default:
                    return state;
                }
            case 3 : 
                return /* record */[
                        /* title */state[/* title */0],
                        /* tasks */addElementToList(state[/* tasks */1], action[0]),
                        /* currentTaskName */state[/* currentTaskName */2],
                        /* currentTaskDescription */state[/* currentTaskDescription */3],
                        /* currentTask */state[/* currentTask */4]
                      ];
            case 4 : 
                return /* record */[
                        /* title */state[/* title */0],
                        /* tasks */state[/* tasks */1],
                        /* currentTaskName */state[/* currentTaskName */2],
                        /* currentTaskDescription */state[/* currentTaskDescription */3],
                        /* currentTask */action[0]
                      ];
            case 1 : 
            case 2 : 
            case 5 : 
                return state;
            
          }
        }), /* record */[
        /* title */"Add Task",
        /* tasks : [] */0,
        /* currentTaskName */"",
        /* currentTaskDescription */"",
        /* currentTask */undefined
      ]);
  var dispatch = match[1];
  var state = match[0];
  var updateTaskProps = function ($$event) {
    $$event.preventDefault();
    var value = $$event.target.value;
    var name = $$event.target.name;
    console.log(name);
    console.log(value);
    return Curry._1(dispatch, /* UpdateTaskProp */Block.__(0, [
                  name,
                  value
                ]));
  };
  var createTask = function (taskName, taskDescription) {
    return /* record */[
            /* name */taskName,
            /* description */taskDescription,
            /* pomodoriEstimate */0,
            /* pomodoriActual */0
          ];
  };
  var match$1 = state[/* title */0];
  var tmp = match$1 === "Add Task" ? React.createElement("div", {
          className: "row"
        }, React.createElement("div", {
              className: "col-12"
            }, React.createElement("form", {
                  action: ""
                }, React.createElement("div", {
                      className: "form-group"
                    }, React.createElement("label", {
                          htmlFor: "Task Name"
                        }, "Task Name"), React.createElement("input", {
                          className: "form-control",
                          id: "taskName",
                          name: "taskName",
                          placeholder: "Enter Task Name",
                          type: "text",
                          onChange: updateTaskProps
                        })), React.createElement("div", {
                      className: "form-group"
                    }, React.createElement("input", {
                          className: "form-control",
                          id: "taskDescription",
                          name: "taskDescription",
                          placeholder: "Enter Task Description",
                          type: "text",
                          onChange: updateTaskProps
                        }))))) : null;
  return React.createElement("div", {
              className: "row"
            }, React.createElement("div", {
                  className: "modal fade",
                  id: "pomodoroModal",
                  role: "dialog"
                }, React.createElement("div", {
                      className: "modal-dialog",
                      role: "document"
                    }, React.createElement("div", {
                          className: "modal-content"
                        }, React.createElement("div", {
                              className: "modal-header"
                            }, React.createElement("div", {
                                  className: "modal-title"
                                }, state[/* title */0]), ReactDOMRe.createElementVariadic("button", {
                                  "data-dismiss": "modal",
                                  type: "button",
                                  className: "close",
                                  "aria-label": "Close"
                                }, /* array */[React.createElement("span", {
                                        "aria-hidden": true
                                      }, "Close")])), React.createElement("div", {
                              className: "modal-body"
                            }, tmp), React.createElement("div", {
                              className: "modal-footer"
                            }, React.createElement("div", {
                                  className: "row"
                                }, React.createElement("br", undefined), ReactDOMRe.createElementVariadic("button", {
                                      "data-dismiss": "modal",
                                      type: "button",
                                      onClick: (function (param) {
                                          return Curry._1(dispatch, /* ClickAddTask */Block.__(3, [createTask(state[/* currentTaskName */2], state[/* currentTaskDescription */3])]));
                                        }),
                                      className: "btn btn-primary"
                                    }, /* array */[Utils$ReactHooksTemplate.rStr("Add")]), ReactDOMRe.createElementVariadic("button", {
                                      "data-dismiss": "modal",
                                      type: "button",
                                      className: "btn btn-secondary",
                                      "aria-label": "Close"
                                    }, /* array */[Utils$ReactHooksTemplate.rStr("Close")])))))), React.createElement("div", {
                  className: "col-12 text-center"
                }, React.createElement("h2", undefined, "Task View"), React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col-12 task-area"
                        }, React.createElement("h4", undefined, "Tasks"), React.createElement("div", {
                              className: "row"
                            }, React.createElement("div", {
                                  className: "col-12"
                                }, React.createElement("ul", {
                                      className: "list-group"
                                    }, React.createElement("li", {
                                          className: "list-group-item task-area",
                                          onClick: (function (param) {
                                              return /* () */0;
                                            })
                                        }, "Add a new task", React.createElement("br", undefined), ReactDOMRe.createElementVariadic("button", {
                                              "data-toggle": "modal",
                                              "data-target": "#pomodoroModal",
                                              type: "button",
                                              className: "btn btn-secondary"
                                            }, /* array */[Utils$ReactHooksTemplate.rStr("Add Task")])), Utils$ReactHooksTemplate.listToReactArray(List.mapi((function (index, task) {
                                                return React.createElement(TaskRow$ReactHooksTemplate.make, {
                                                            name: task[/* name */0],
                                                            description: task[/* description */1],
                                                            estimate: task[/* pomodoriEstimate */2],
                                                            actual: task[/* pomodoriActual */3],
                                                            key: String(index)
                                                          });
                                              }), state[/* tasks */1])))))))));
}

var make = TaskView;

exports.addElementToList = addElementToList;
exports.make = make;
/* react Not a pure module */
